#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
\usepackage[final]{nips_2016}

% to compile a camera-ready version, add the [final] option, e.g.:
% \usepackage[final]{nips_2016}

%\usepackage[utf8]{inputenc} % allow utf-8 input
%\usepackage[T1]{fontenc}    % use 8-bit T1 fonts
\usepackage{hyperref}       % hyperlinks
\usepackage{url}            % simple URL typesetting
\usepackage{booktabs}       % professional-quality tables
\usepackage{amsfonts}       % blackboard math symbols
\usepackage{nicefrac}       % compact symbols for 1/2, etc.
\usepackage{microtype}      % microtypography
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package babel
\inputencoding utf8
\fontencoding T1
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine natbib
\cite_engine_type authoryear
\biblio_style plainnat
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\rightmargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Maxima - A Fast Fearless Secure Sharded Block-Chain
\end_layout

\begin_layout Author
Maximilian E.
\begin_inset space ~
\end_inset

Chamberlin
\begin_inset Newline newline
\end_inset

 MA (Oxford) M.Phil (Cambridge)
\begin_inset Newline newline
\end_inset

 Maxima Organisation 
\begin_inset Newline newline
\end_inset

 
\family typewriter
mec@Maxima.org
\family default
 
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Abstract
Recently, high demand and limited scalability have increased the average
 transaction times and fees in popular cryptocurrencies, yielding an unsatisfact
ory experience.
 Here we introduce Maxima a cryptocurrency with a sharded block-chain, one
 where the network is divided into partitions called shard which maintain
 their own blocks.
 
\end_layout

\begin_layout Abstract
In Maxima, validator committees are sampled for each shard.

\series bold
 
\series default
Validators vote on the availability of blocks to the network, and are shuffled
 off shards very quickly.
 Once a committee has determined if a block is accessible to nodes on a
 shard, nodes on that shard execute the transactions and verify the blocks
 validity- producing a succint fraud proof if the block is invalid.
 Cross shard transactions are managed using tools from distributed systems,
 like locks and yanks.
 
\end_layout

\begin_layout Abstract
Maxima is a globally distributed computer that is secure under an honest
 majority assumption, and puts in place mechanisms to prevent adaptive adversari
es from corrupting the network.
 With 20 shards, Maxima is projected to process over 20,000 transactions
 per second.
 
\end_layout

\begin_layout Part
Introduction
\end_layout

\begin_layout Section
Motivation and Outline - Core Sharding
\end_layout

\begin_layout Standard
In Bitcoin, blocks are added to the block-chain approximately every 10 minutes,
 at a relatively fixed pace that results in a TPS of 5-7.
 Simple solutions to expanding the capacity of the block-chain have found
 natural limits to their efficacy: enlarging blocks runs up against user
 bandwidth limits; hastening the rate at which blocks are mined increases
 orphaning.
 
\end_layout

\begin_layout Standard
A more promising solution to the problem of scaling is to run separate chains
 that process transactions within partitions of the network, called shards.
 The key challenges are: (1) how to manage the communication between the
 different shards, a problem which is closely related to ensuring the atomicity
 of transactions in a distributed system and (2) how to run these many separate
 block-chains in a way that does not compromise on security, since each
 shard-chain will only have a fraction of the mining/validation power of
 the network.
\end_layout

\begin_layout Standard
In this paper, we propose mechanisms to ensure the atomicity of transactions
 and to ensure that the security of separate chains is not compromised.
 We adopt an honest majority assumption for the network, assuming fewer
 than a fraction 
\begin_inset Formula $f$
\end_inset

 of 0.25 nodes are Byzantine.
 Note 
\begin_inset Formula $f=0.25$
\end_inset

 is an arbitrary constant bounded below 1/3 to ensure good constants.
 We also put in place safe-guards against adaptive adversaries who may bribe
 network participants.
 
\end_layout

\begin_layout Standard
With this in mind, our protocol can be described below.
 Validator committees are sampled for each shard.
 Sampling validators randomly means that with a sufficient number (400)
 we can ensure an honest majority of 2/3 of per shard almost surely.
 
\end_layout

\begin_layout Standard
Validators then vote on the availability of blocks to the network, and are
 shuffled off shards very quickly.
 This fast shuffling is to ensure that an adaptive adversary does not have
 the time to find and corrupt the validators of each shard.
 Because of this fast shuffling, the work that a validator can perform must
 be very minimal.
 Validators check that the data corresponding to the Merkle root of a block
 is accessible to a shard, so that the members of a shard can execute those
 transactions.
 If there is a dispute about transaction execution, validators also resolve
 disputes by considering succinct proofs of invalid execution.
 Cross shard transactions are managed using tools from distributed systems,
 like yanks, to ensure that transactions can be executed atomically.
 
\end_layout

\begin_layout Standard

\series bold
Our key ambitions are to reduce costs and improve scalability - this will
 be a constant theme throughout this work.
 
\end_layout

\begin_layout Subsection
Protocol Structure 
\end_layout

\begin_layout Standard
The construction of our protocol depends on the following, relatively independen
t components, which can be subdivided into three themes: voting schemes;
 data creation and concurrency controls.
\end_layout

\begin_layout Enumerate

\series bold
Motivation and Outline - Sharding
\series default
 
\end_layout

\begin_deeper
\begin_layout Enumerate
Protocol Structure
\end_layout

\end_deeper
\begin_layout Enumerate
Consensus:
\end_layout

\begin_deeper
\begin_layout Enumerate
Voting Scheme
\end_layout

\begin_layout Enumerate
Validator registration and Shuffling
\end_layout

\end_deeper
\begin_layout Enumerate
Concurrency Controls
\end_layout

\begin_deeper
\begin_layout Enumerate
Locking State for Cross Shard Transactions
\end_layout

\begin_layout Enumerate
Stateless Clients
\end_layout

\end_deeper
\begin_layout Enumerate
Minimal Sharding - No Smart Contracts
\end_layout

\begin_deeper
\begin_layout Enumerate
Summary - a simple protocol to transfer currency.
\end_layout

\end_deeper
\begin_layout Enumerate

\series bold
Motivation and Outline - Advanced Sharding 
\end_layout

\begin_layout Enumerate
Separating Validity Checking from Availability Checking
\end_layout

\begin_deeper
\begin_layout Enumerate
Erasure Coding
\end_layout

\begin_layout Enumerate
Fraud Proofs
\end_layout

\begin_layout Enumerate
Summary
\end_layout

\end_deeper
\begin_layout Enumerate
Solving the State Problem 
\end_layout

\begin_deeper
\begin_layout Enumerate

\series bold
Introducing rental fees to the block-chain 
\end_layout

\begin_layout Enumerate

\series bold
Building on top of IPFS
\end_layout

\end_deeper
\begin_layout Enumerate
Virtual Machine 
\end_layout

\begin_deeper
\begin_layout Enumerate
EWASM VM
\end_layout

\begin_layout Enumerate
Transpilers and the future of block-chain
\end_layout

\end_deeper
\begin_layout Section
Achieving Fork-Free Consensus
\end_layout

\begin_layout Subsection
Consensus Scheme - Modified Dfinity
\end_layout

\begin_layout Standard
One critique of proof of stake are that the economies of scale eventually
 lead to a few centralised stakers.
 This led to the adoption of delegated proof of stake.
 But with centralisation there is a good chance an actor can be bribed.
 More recently, consensus models have emerged that randomly sample participants
 from a global pool.
 Both Dfinity and Zilliqa have byzantine fault tolerant like algorithms
 that have O(n) communication complexity, enabling the scaling of ths algorithm
 to the order of 400 nodes.
\end_layout

\begin_layout Standard

\series bold
Weighing up the benefits and disadvantages of our approach
\end_layout

\begin_layout Standard
There may be criticisms in that marginal incentives are not properly aligned
 in these schemes, compared with slashing proof of stake schemes like casper.
 However, as both rely on an honest majority assumption we deem them both
 as safe as each other.
 Slashing may also be introduced probabilistically to the Dfinity scheme
 as we will later show.
 Though we could also adopt the Zilliqa consensus algorithm, we adopt the
 Dfinity model for the simplicity of its algorithm which we outline here.
 
\end_layout

\begin_layout Standard

\series bold
Algorithm in depth
\end_layout

\begin_layout Standard
In Dfinity, the network is grouped into threshold relay groups.
 These groups are created through random sampling and have a size of about
 400.
 A random number is generated which selects the first relay group.
 These relay groups then sign on the random number to produce another random
 number and select the next relay group.
 The random number also selects a number of block proposers, and the blocks
 if valid may be signed by the current threshold relay group.
 This algorithm (with block proposers) and notaries who sign on blocks have
 similarities with PBFT schemes.
 Whereas PBFT commits only one block and forges consensus after a round
 fo prepare and commits, the Dfinity scheme may commit more than one block.
 Dfinity achieves its high speed and short block times exactly because notarizat
ion is not full consensus.
 However, notarization can be seen as optimistic consensus because it will
 frequently be the case that only one block gets notarized.
 Hence, whenever the broadcast network functions normally a transaction
 is final in the Dfinity consensus after two notarized confirmations plus
 a network traversal time.
 The notarization step makes it impossible for the adversary to build and
 sustain a chain of linked, notarized blocks in secret.
 For this reason, Dfinity does not suffer from the selfish mining attack
 [4] or the nothing-at-stake problem.
\end_layout

\begin_layout Standard

\series bold
Advantages
\end_layout

\begin_layout Standard
Fork-free protocols typically use BFT style algorithms.
 These are systems where a vote for a block consists of a prepare followed
 by a commit.
 They are fork-free, which is essential for cross-shard communication.
 Traditionally, PBFT couldn't scale to the size of a network.
 So instead, we: 
\end_layout

\begin_layout Standard
Subsample from the entire population so many validators are voting but not
 all (in Zilliqa, they use X).
 If say 400 participants are voting and we assume that f<25% are byzantine.
 We can show that the probability more than 2/3 of those voting are also
 byzantine is less than the number of atoms in the universe.
 
\end_layout

\begin_layout Standard

\series bold
What are nodes voting on?
\end_layout

\begin_layout Standard
However, a key question here is: what precisely are the nodes voting on?
 A simple scheme would be for nodes to run the transactions in a block and
 verify that they are valid.
 If more than half the nodes agree that a block is valid it is finalised
 during notarisation.
 However, this presents problems in the context of sharding: the validators
 do not have the storage capacity or bandwidth to maintain the state of
 all shards, and yet they must be shuffled quickly between shards.
 One solution to this problem is to store the witness data with the transaction
 in a block, entailing that a block is 
\begin_inset Quotes eld
\end_inset

self-authenticating
\begin_inset Quotes erd
\end_inset

, and the witness data need not be downloaded.
 
\end_layout

\begin_layout Standard
Another solution is for validators to just check that data is available,
 rather than the correctness of a block.
 If a block is unavailable some honest actor in the network may respond
 with a fraud proof and take the faulty block creator's deposit.
 Ultimately, we offload the actual checking of whether a block is correct
 or not to the network.
 Just checking data availability has a second advantage: the committee can
 share the workload of the task.
 Below we give an outline of how this may be made possible:
\end_layout

\begin_layout Standard
Blocks are expanded with an erasure code to a size of 400, say.
 The erasure code is a redundant encoding scheme which ensures that if 1/6
 of the code is available, the original block can be reconstructed by honest
 nodes within the network.
 Then each of the 400 committee members checks for 3 or 4 pieces of data.
 By the probabilistic sampling, we can ensure that 2/3 of the committee
 is honest.
 We also require a threshold signature of 1/2 for a block to be notarised
 for its validitiy.
 
\end_layout

\begin_layout Standard
If a block is available, then 2/3 of the committee will vote and so we have
 no issues.
 
\end_layout

\begin_layout Standard
If a block is unavailable, then fewer than 1/6 of honest members can have
 pieces of data.
 And so even with these votes, and 1/3 of the dishonest majority, they cannot
 reach the 50% threshold required.
 We devote a further section to data availability proofs.
 
\end_layout

\begin_layout Standard

\series bold
Slashing Conditions
\end_layout

\begin_layout Standard
For all those who voted that a block is available, we require a random section
 of the group to reveal the data that they got from the network.
 This will disincentivise some from creating a block.
 Creating a slashing condition going the other way is more tricky, since
 we don't know if a block is unavailable or a a validator is just witholding
 data.
 However, liveness is a less serious issue, since the beacon group can always
 be changed.
 
\end_layout

\begin_layout Standard

\series bold
Fall-back Mechanism
\end_layout

\begin_layout Standard
One pertinent question is what should happen if a Beacon group is corrupted?
 We use fast shuffling of validators to ensure that this is near impossible.
 
\end_layout

\begin_layout Subsection
Consensus Scheme - Validator Registration and Shuffling
\end_layout

\begin_layout Standard
Here , we just say a little more about the actual mechanisms and concrete
 data structures underpinning the validator sampling.
 Validators have their own shard, which they register a deposit to.
 This deposit is a non-trivial sum.
 
\series bold
TODO - copy from DFINITY
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Section
Cross Shard Communication Through Message Passing
\end_layout

\begin_layout Standard
Message Passing is the facvoured approach for concurrency control in distributed
 systems.
 
\end_layout

\begin_layout Standard
We use a message passing model based on Erlang, which has a simple implementatio
n of CSP (Communicating Sequential Processes) where soft-threads (threads)
 have each a single mailbox that can receive messages.
 The soft-thread can pop off and react to messages in its mailbox, also
 supporting some form of pattern matching for prioritization.
 
\end_layout

\begin_layout Standard
Contracts are like the threads of execution and we have a single mailbox
 per contract.
 Conceptually message passing is simple, it is no different from running
 the transaction, but with updated data, but with a special message type
 to distinguish it from ordinary data.
 Howeever, the only difference will be in the accumulation of messages.
 Validators bundle up the messages and feed them in as data to the contract,
 which can then pop messages off and react to them.
 Diagramatically, we could envidage something like this.
 
\end_layout

\begin_layout Standard
This introduces few overheads to the protocol, since popping off is just
 a data operation, which can be defined in the main-loop of any contract.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="8" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $S_{1}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $S_{2}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $S_{3}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $t_{0}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $M_{1}$
\end_inset

 to 
\begin_inset Formula $C_{1}$
\end_inset

 on 
\begin_inset Formula $S_{3}$
\end_inset

 on chain
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
 Sent to 
\begin_inset Formula $S_{2}$
\end_inset

 by val
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $t_{2}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $M_{2}$
\end_inset

 to 
\begin_inset Formula $C_{1}$
\end_inset

 on 
\begin_inset Formula $S_{3}$
\end_inset

 on chain
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Sent to 
\begin_inset Formula $S_{2}$
\end_inset

 by val
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $t_{3}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Actor bundles 
\begin_inset Formula $M_{1}$
\end_inset

 and 
\begin_inset Formula $M_{2}$
\end_inset

 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $t_{4}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
\begin_inset Formula $[M_{2},M_{1}]$
\end_inset

 validated against Mroot
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
\begin_inset Formula $C_{1}$
\end_inset

 reads [
\begin_inset Formula $M_{2},M_{1}$
\end_inset

]
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
We now talk about guarantees in our message passing model: 
\end_layout

\begin_layout Standard

\series bold
Availability
\series default
: 
\end_layout

\begin_layout Standard
A pertinent question arises: 
\series bold
what mechanism ensures that a messag
\series default
e on one shard makes its way over to a message on another shard? We charge
 the validators on Shard1 and Shard2, with disseminating the information
 to the third shard.
 Since there are approximately 400 validators per shard, this large number
 ensures that with very high likelihood 
\begin_inset Formula $1-(\frac{1}{3})^{400}$
\end_inset

, that a message will get through.
 Certainly a message will get through eventually, if we take it that shards
 might be DOS'd.
 The message is sent with a transaction fee, and the transaction fee is
 split between block miners on both shards.
 In fact shards will periodically relay the message until it is included
 in a shard.
 
\end_layout

\begin_layout Standard

\series bold
At Once:
\end_layout

\begin_layout Standard
Each message contains a signed nonce, which ensures that messages cannot
 be replayed.
 
\end_layout

\begin_layout Standard

\series bold
Message Ordering: 
\end_layout

\begin_layout Standard
Messages sent directly from one shard to another will not be received out-of-ord
er.
 
\end_layout

\begin_layout Standard
Shard S1 sends messages M1, M2, M3 to S2
\end_layout

\begin_layout Standard
Actor S3 sends messages M4, M5, M6 to S2
\end_layout

\begin_layout Standard
However, we do not provide guarantees about the ordering of messages between
 shards.
 
\end_layout

\begin_layout Standard
Furthermore, specific concurrency control mechanisms may be built ontop
 of message passing systems.
 For instance locking schemes and other such things.
 
\end_layout

\begin_layout Standard

\series bold
Other Concurrency Management
\end_layout

\begin_layout Standard
A question that emerges is what if the transaction fees are too low and
 it takes a long time for a message to be included on another shard? More
 broadly, should we be providing guarantees on message passing? We have
 provided a robust system, but we adopt the Erlang philosophy that we make
 the fallibility of communication explicit through message passing, and
 do not try to provide a leaky abstraction.
 Instead users can write implementations that provide guarantees on message
 delivery, and delegate these to higher level protocols.
 
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
This could also be done in our system.
 The only meaningful way for a sender to know whether an interaction was
 successful is by receiving a business-level acknowledgement message, which
 is not something Akka could make up on its own (neither are we writing
 a “do what I mean” framework nor would you want us to).
\end_layout

\end_inset

 This is a model that has been used with great success in Erlang and requires
 the users to design their applications around it.
 You can read more about this approach in the 
\series bold
Erlang documentation (section 10.9 and 10.10)
\series default
 and Akka.
 
\end_layout

\begin_layout Standard
Another angle on this issue is that by providing only basic guarantees those
 use cases which do not need stronger reliability do not pay the cost of
 their implementation; it is always possible to add stronger reliability
 on top of basic ones
\end_layout

\begin_layout Standard
On top of these other concurrency controls can be implemented in smart contracts
, for instance various kinds of locking scheme.
 
\end_layout

\begin_layout Standard

\series bold
The specific case of sending money?
\series default
 
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $S_{1}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $S_{2}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $S_{3}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $t_{0}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $M_{1}$
\end_inset

 to 
\begin_inset Formula $C_{1}$
\end_inset

 on 
\begin_inset Formula $S_{3}$
\end_inset

 on chain
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
 Sent to 
\begin_inset Formula $S_{2}$
\end_inset

 by val; deduct
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $t_{3}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Actor bundles 
\begin_inset Formula $M_{1}$
\end_inset

 and 
\begin_inset Formula $M_{2}$
\end_inset

 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $t_{4}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
\begin_inset Formula $[M_{2},M_{1}]$
\end_inset

 validated against Mroot
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
\begin_inset Formula $C_{1}$
\end_inset

 reads [
\begin_inset Formula $M_{2},M_{1}$
\end_inset

]
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
Minimal Sharding - No Smart Contracts
\end_layout

\begin_layout Standard
For each shard, the threshold relay assigns a different committee group
 to the shard.
 Each committee votes of the current block,checking for the validitiy of
 the transactions.
 Initially, we will only support money being sent from one shard to another.
 However, we will later add virtual machine functionality.
 A question arises: what if a beacon group stalls because it is DOS'd.
 After a few minutes, if no relay group has been selected, two relay groups
 can vote to correct a shard.
 
\end_layout

\begin_layout Section
Advanced Sharding - Motivation and Introduction
\end_layout

\begin_layout Standard
We have outlined a simple protocol to achieve sharded message calls.
 However, we want to position ourselves at the forefront of technology.
 Key to this is understanding the direction 
\end_layout

\begin_layout Standard

\series bold
Virtual machines and Interoperability.
\end_layout

\begin_layout Standard
A sharded chain allows one to run the consensus logic of many chains.
 For instance you could imagine one chain running bitcoin transactionson
 one chain and the transactions of another coin on another.
 Key to this would be cross compilation.
 So, if we had a WASM virtual machine for our transactions, all that would
 be needed would be to find a way to transpile code from one virtual machine
 to another.
 Then one could have all the code written on EThereum .
 Transpilation is a well studied topic, and has been used to convert C++
 to Javascript etc.
 
\end_layout

\begin_layout Standard

\series bold
The language of the WEB
\end_layout

\begin_layout Standard
Having a wasm virtual machine has another benefit in that it is becoming
 the de facto standard for the web.
 This means that any code that could be executed in the browser, something
 that is key to hosting websites could be run on our block-chain.
 This would need to be coupled with efficient storage mechanisms.
 Currently on Ethereum the main cost, is in storing data.
 This is because Ethereum is getting to be at capacity in terms of the blocks
 that each node must sync on when toring data.
 In sharding, this removes the storage problem by a huge constant factor.
 
\end_layout

\begin_layout Standard

\series bold
Efficient Storage
\end_layout

\begin_layout Standard
Apart from sharding, one idea to improve storage is to move to a model where
 there is an efficient market for storing data.
 This will be crucial, the greatest expense to ethereum is the cost of storage,
 so the better we can bring this down the more competitive our sharding
 solution will be.
 
\end_layout

\begin_layout Section
Separating Validity checking from State Execution
\end_layout

\begin_layout Standard
We can reduce the amount of checking that a validator does, which will enable
 smart contracts to run very heavy processing algorithms.
 
\end_layout

\begin_layout Standard
Blocks are created within each shard, and the merkle root is signed on and
 shared with other shards.
 The question we now have is this? 
\end_layout

\begin_layout Standard
(1) How can we ensure that all of the data contained within a shard is available
 to all members of the shard?
\end_layout

\begin_layout Standard
(2) Given that data isavailable, this means anyone can report flaws.
\end_layout

\begin_layout Standard
The question is how can we prove that a block is available? 
\end_layout

\begin_layout Standard
One could require a majority of half the sampled validators perform availability
 checks and then sign off on the availability of a root.
 
\end_layout

\begin_layout Standard
Question is how can we feed in the right marginal incentives? 
\end_layout

\begin_layout Itemize
Have rewards for attesting yes, but with penalties if they don't have proof
 they checked for data availability.
 This means nodes are incentivised to say yes if they do have the data,
 but won't declare yes if they don't and know others won't check them.
 small reward for saying no.
 
\end_layout

\begin_layout Itemize
randomly check availables for a reveal, with sufficinelty high penalty that
 makes lying unprofitable.
 Also allow challenges for those who know ing wrong.
 For those who don't require a random reveal with sufficiently high penalties.
 => say that a person has 10 blocks to do so before being slashed.
 
\end_layout

\begin_layout Itemize
unavailable|available are losing their rewards 
\end_layout

\begin_layout Standard
If they are aware many other people do not have access to the data, they
 may vote yes anyway.
 
\end_layout

\begin_layout Standard

\series bold
However, we don't want validators to have to actualy execute the state.
 This would take too long.
 
\end_layout

\begin_layout Enumerate
How can we resolve this issue? Ethereum uses Truebit, which takes the form
 of an interactive verification game.
 The main issue with truebit is that it requires multiple rounds of verification
 and thus can result in low latency in cases where there is a dispute.
 
\end_layout

\begin_layout Enumerate
The approach that we take is to erasure encode the trace of the execution.
 We use a 3d erasure encoding to ensure that the fraud proofs are of a size
 cube-root(n).
 
\end_layout

\begin_layout Enumerate
Again using sampling techniques, we can assign validators to each transaction.
 
\end_layout

\begin_layout Section*
Self-Authenticating Erasure Codes 
\end_layout

\begin_layout Standard
We want validators to be able to guarantee that honest nodes can access
 data on the network, or stated more succinctly that 
\series bold
data is available
\series default
.
 A simple way for validators to check that data is available is to download
 a whole block.
 So, in the current scheme we would sample a set of validators - say 400,
 which is enough to guarantee an honest majority of participants.
 Then all of these shards would attempt to download the data from the network,
 and finaly take a vote between themselves on whether the data is available.
 
\end_layout

\begin_layout Standard
However, to increase efficiency, we would like to use a scheme where each
 validator need not download the entire block.
 If blocks were really large, say GB sized, which would be ideal for scalability
, it may be impractical to have validators enter a shard and download multiple
 blocks to verify availability.
\end_layout

\begin_layout Standard
We can avoid this, if we take a sampling approach.
 However, validators will not sample directly from the block itself, but
 instead will sample from an erasure code.
 
\end_layout

\begin_layout Standard
Why do we want validators to check that data is available for a block? If
 the data for a block is available to the network, this means that honest
 executors on a shard can check to see if there are any faults with it and
 produce succint fraud proofs, O(1) sized proofs that a block contains invalid
 data.
 
\end_layout

\begin_layout Standard
What this ultimately means is that executors on a shord can check to see
 if 
\end_layout

\begin_layout Standard
We don't actually want the validators to perform the executions themselves
 because doing so would take too long for large blocks of for transactions
 that take a long tiem to execute.
 
\end_layout

\begin_layout Itemize
N - the number of verifiers
\end_layout

\begin_layout Itemize
P - the number of checks made by each client 
\end_layout

\begin_layout Itemize
Denot
\end_layout

\begin_layout Standard
Collectively N verifiers want to check a block of size M is available.
 They wish to do so without 
\end_layout

\begin_layout Section
Construction
\end_layout

\begin_layout Standard
The below is inefficient.
 If we have a row of root(m) values , we can recompute the entire row from
 that.
 To do a fraud proof, we still need to authenticate the column.
 What if we don't have a column value? So this still requires availability
 of some values to prove consistency, but we may not have those values.
 
\end_layout

\begin_layout Subsection
Glossary 
\end_layout

\begin_layout Standard

\series bold
K 
\series default
- The expansion factor of each read solomon code
\end_layout

\begin_layout Standard
Let 
\begin_inset Formula $D_{ij},F_{ij},G_{ij}$
\end_inset

 represent the data int he first, second and third squares respectively
\end_layout

\begin_layout Standard
\begin_inset Formula $x$
\end_inset

,
\begin_inset Formula $y$
\end_inset

,
\begin_inset Formula $z$
\end_inset

 are respectively the bilinear accumulator constants for the committed values
\end_layout

\begin_layout Standard

\series bold
First Square:
\end_layout

\begin_layout Standard
Let 
\begin_inset Formula $d_{ij}$
\end_inset

 represent chunk 
\begin_inset Formula $i,j$
\end_inset

 of the original data
\end_layout

\begin_layout Itemize
\begin_inset Formula $x_{ij}$
\end_inset

 is the bilinear accumulator witness for the tuple 
\begin_inset Formula $(d_{ij},i,j)$
\end_inset

, that is 
\begin_inset Formula $e[(d_{ij},i,j),x_{ij}]=x$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $D_{ij}$
\end_inset

 represent 
\begin_inset Formula $(d_{ij},i,j),x_{ij}$
\end_inset


\end_layout

\begin_layout Standard

\series bold
Second Square:
\end_layout

\begin_layout Itemize
Let 
\begin_inset Formula $f_{ij}$
\end_inset

 represent the 
\begin_inset Formula $j$
\end_inset

 th evaluation point in the erasure code for row 
\begin_inset Formula $D_{i*}$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $y_{ij}$
\end_inset

 is the bilinear accumulator witness for the tuple 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none

\begin_inset Formula $(f_{ij},i,j)$
\end_inset


\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\uuline default
\uwave default
\noun default
\color inherit
, that is 
\begin_inset Formula $e[(f_{ij},i,j),y_{ij}]=y$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $F_{ij}$
\end_inset

 represent 
\begin_inset Formula $(f_{ij},i,j),y_{ij}$
\end_inset


\end_layout

\begin_layout Standard

\series bold
Third Square:
\end_layout

\begin_layout Itemize
Let 
\begin_inset Formula $g_{ij}$
\end_inset

 represent the 
\begin_inset Formula $i$
\end_inset

 th evaluation point in the erasure code for column 
\begin_inset Formula $F_{*j}$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $z_{ij}$
\end_inset

 is the bilinear accumulator witness for the tuple 
\begin_inset Formula $(g_{ij},i,j)$
\end_inset

, that is 
\begin_inset Formula $e[(g_{ij},i,j),z_{ij}]=z$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $G_{ij}$
\end_inset

 represent 
\begin_inset Formula $(g_{ij},i,j),z_{ij}$
\end_inset


\end_layout

\begin_layout Standard
An example is given below with K =2/3:
\end_layout

\begin_layout Standard

\series bold
Definition
\series default
: for an element 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none

\begin_inset Formula $G_{ij}=(g_{ij},i,j),z_{ij}$
\end_inset


\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\uuline default
\uwave default
\noun default
\color inherit
 to be 
\series bold
available
\series default
, an honest participant of the network must have access to it and it must
 be authenticated, so the following constraint holds: 
\begin_inset Formula $e[(g_{ij},i,j),z_{ij}]=z$
\end_inset

.
 
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="5">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $(d_{00},0,0),x_{00}$
\end_inset

 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $(d_{01},0,1),x_{01}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $(f_{00},0,0),y_{00}$
\end_inset

 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $(f_{01},0,1),y_{01}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $(f_{02},0,2),y_{02}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $(d_{10},1,0),x_{10}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $(d_{11},1,1),x_{11}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $(f_{10},1,0),y_{10}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $(f_{11},1,1),y_{11}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $(f_{12},1,2),y_{12}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $(g_{00},0,0),z_{00}$
\end_inset

 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $(g_{01},0,1),z_{01}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $(g_{02},0,2),z_{02}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $(g_{10},1,0),z_{10}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $(g_{11},1,1),z_{11}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $(g_{12},1,2),z_{12}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $(g_{20},2,0),z_{20}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $(g_{21},2,1),z_{21}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $(g_{22},2,2),z_{22}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Subsection
Authentication/Availability Transitivity 
\end_layout

\begin_layout Standard
If a set of values 
\begin_inset Formula $X$
\end_inset

 in an erasure code are available, and can reproduce some data 
\begin_inset Formula $Y$
\end_inset

, then if 
\begin_inset Formula $y$
\end_inset


\begin_inset Formula $\in$
\end_inset

Y is not authenticated this can be proven in 
\begin_inset Formula $O(\sqrt{m})$
\end_inset

 steps.
 The authentication transitivity assumption is this : unless an 
\begin_inset Formula $O(\sqrt{(m)})$
\end_inset

 fraud proof is given by the network: then if 
\begin_inset Formula $X$
\end_inset

 is available and produces Y, Y must be authenticated and thus available.
 
\end_layout

\begin_layout Subsection
Proof of Uniqueness 
\end_layout

\begin_layout Standard
Since all available elements are authenticated.
 If it is possible to construct more than one element in the 
\begin_inset Formula $ijth$
\end_inset

 index of any of 
\begin_inset Formula $D$
\end_inset

, 
\begin_inset Formula $F$
\end_inset

, 
\begin_inset Formula $G$
\end_inset

, then an O(1) proof is given by presenting something like:
\end_layout

\begin_layout Standard
\begin_inset Formula $(d_{00},0,0),x_{00}$
\end_inset

 , 
\begin_inset Formula $(d_{00}^{'},0,0),x_{00}^{'}$
\end_inset

 , where 
\begin_inset Formula $d_{00}\neq d_{00}^{'}$
\end_inset


\end_layout

\begin_layout Standard
This means if two distinct items are unavailable a succinct fraud proof
 can be given.
 
\end_layout

\begin_layout Subsection
Proof of Liveness 
\end_layout

\begin_layout Standard
Given points 8.1, we can prove liveness.
\end_layout

\begin_layout Standard
Suppose no authentication fraud proof is given by the network, then: 
\end_layout

\begin_layout Standard
If the data for a row 
\begin_inset Formula $D_{i*}$
\end_inset

 is unavailable then: (by authentication transitivity)
\end_layout

\begin_layout Standard
#available elements in 
\begin_inset Formula $F_{i*}$
\end_inset

 
\begin_inset Formula $<\sqrt{m}$
\end_inset

 or equivalently:
\end_layout

\begin_layout Standard
#unavailable elements in 
\begin_inset Formula $F_{i*}$
\end_inset

 
\begin_inset Formula $>(k-1)\sqrt{m}$
\end_inset

 .
 This implies:
\end_layout

\begin_layout Standard
#unavailable elements in 
\begin_inset Formula $G$
\end_inset

 
\begin_inset Formula $>(k-1)^{2}m$
\end_inset

 or equivalently: (by authentication transitivity)
\end_layout

\begin_layout Standard
#available elements in 
\begin_inset Formula $G$
\end_inset

 
\begin_inset Formula $<k^{2}m-(k-1)^{2}m=(2k-1)m$
\end_inset

 
\end_layout

\begin_layout Standard
Therefore a liveness check needs to ensure that more than 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none

\begin_inset Formula $(2k-1)m$
\end_inset

 elements of G are available with a high likelihood.
 If this be the case, we can reconstruct some dataset D.
 
\end_layout

\begin_layout Subsection*
Collaboratively Generated Erasure Codes
\end_layout

\begin_layout Standard
Collaborative generation, check two merkle roots.
 
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="10" columns="6">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\begin_inset Formula $(d_{00},0,0),x_{00}$
\end_inset


\series default
 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $(d_{01},0,1),x_{01}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $(f_{00},0,0),y_{00}$
\end_inset

 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $(f_{01},0,1),y_{01}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $(f_{02},0,2),y_{02}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $(d_{10},1,0),x_{10}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $(d_{11},1,1),x_{11}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $(f_{10},1,0),y_{10}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $(f_{11},1,1),y_{11}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $(f_{12},1,2),y_{12}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $x_{0*,}\bar{x}_{0*}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $x_{1*,}\bar{x}_{1*}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
f
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
f
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
f
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $(g_{00},0,0),z_{00}$
\end_inset

 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $(g_{01},0,1),z_{01}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $(g_{02},0,2),z_{02}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $z_{0*},\bar{z_{0*}}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $(g_{10},1,0),z_{10}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $(g_{11},1,1),z_{11}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $(g_{12},1,2),z_{12}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $z_{*1},\bar{z_{*1}}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $(g_{20},2,0),z_{20}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $(g_{21},2,1),z_{21}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $(g_{22},2,2),z_{22}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
\begin_inset Formula $z_{*2},\bar{z_{*2}}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
What are the implications to censoring of codes created by trust scores?
 Competition amongst many sellers with high trust rating, think amazon.
 So should not degenerate to a one proposer model.
 Anyone can build up trust.

\series bold
 So then partly depends on fee, could also require to rotate proposers.
 
\end_layout

\begin_layout Section
Solving The State Problem 
\end_layout

\begin_layout Standard
Suppose that we use the state transition lingo, STF(S, B) -> S’, where S
 and S’ are states, B is a block (or it could be a transaction T), and STF
 is the state transition function.
 Then, we can transform: S -> the state root of S (ie.
 the 32 byte root hash of the Merkle Patricia tree containing S) B -> (B,
 W), where W is a “witness” - a set of Merkle branches proving the values
 of all data that the execution of B accesses STF -> STF’, which takes as
 input a state root and a block-plus-witness, uses the witness as a “database”
 any time the execution of the block needs to read any accounts, storage
 keys or other state data [exiting with an error if the witness does not
 contain some piece of data that is being asked for], and outputs the new
 state root.
 That is, full nodes would only store state roots, and it would be miners’
 responsibility to package Merkle branches (“witnesses”) along with the
 blocks, and full nodes would download and verify these expanded blocks.
 It’s entirely possible for stateless full nodes and regular full nodes
 to exist alongside each other in a network; you could have translator nodes
 that take a block B, attach the required witness, and broadcast (B, W)
 on a different network protocol that stateless nodes live on; if a miner
 mines a block on this stateless network, then the witness can simply be
 stripped off, and the block rebroadcasted on the regular network.
\end_layout

\begin_layout Standard
The simplest way to conceive the witness in a real protocol is to view it
 as an RLP-encoded list of objects, which could then be parsed by the client
 into a {sha3(x): x} key-value map; this map can then simply be plugged
 into an existing ethereum implementation as a “database”.
\end_layout

\begin_layout Standard
One limitation of the above idea being applied to Ethereum as it exists
 today is that it would still require miners to be state-storing full nodes.
 To solve this, we put the witness outside the signed data in the transaction,
 and allow the miner that includes the transaction to adjust the witness
 as needed before including the transaction.
 If miners maintain a policy of holding onto all new state tree nodes that
 were created in, say, the last 24 hours, then they will necessarily have
 all the needed info to update the Merkle branches for any transactions
 published in the last 24 hours.
\end_layout

\begin_layout Standard
Miners and full nodes in general no longer need to store any state.
 This makes “fast syncing” much much faster (potentially a few seconds).
 All of the thorny questions about state storage economics that lead to
 the need for designs like rent (eg.
 https://github.com/ethereum/EIPs/issues/35 18 http://github.com/ethereum/EIPs/iss
ues/87 14 http://github.com/ethereum/EIPs/issues/88 11) and even the current
 complex SSTORE cost/refund scheme disappear, and blockchain economics can
 focus purely on pricing bandwidth and computation, a much simpler problem)
 Even for state-storing clients, the account lists allow clients to pre-fetch
 storage data from disk, possibly in parallel, greatly reducing their vulnerabil
ity to DoS attacks.
 In a sharded blockchain, security is increased by reshuffling clients between
 shards frequently; the more quickly clients are reshuffled, the more adaptive
 the adversaries that the scheme is secure against in a BFT model.
 In a stateless client, this cost drops to zero, allowing clients to be
 reshuffled between every single block that they create.
 One problem that this introduces is: who does store state?
\end_layout

\begin_layout Standard
Any new state trie object that gets created or touched gets by default stored
 by all full nodes for 3 months.
 This will likely be around 2.5 GB, and this is like “welfare storage” that
 is provided by the network on a voluntary basis.
 We know that this level of service definitely can be provided on a volunteer
 basis, as the current light client infrastructure already depends on altruism.
 After 3 months, clients can forget randomly, so that for example a state
 trie object that was last touched 12 months ago would still be stored by
 25% of nodes, and an object last touched 60 months ago would still be stored
 by 5% of nodes.
 Clients can try to ask for these objects using the regular light client
 protocol.
 
\end_layout

\begin_layout Standard
Clients that wish to ensure availability of specific pieces of data much
 longer can do so with payments in state channels, similar to file coing.
 A client can set up channels with paid archival nodes, and make a conditional
 payment in the channel of the form “I give up $0.0001, and by default this
 payment is gone forever.
 However, if you later provide an object with hash H, and I sign off on
 it, then that $0.0001 instead goes to you”.
 This would signal a credible commitment to being possibly willing to unlock
 those funds for that object in the future, and archival nodes could enter
 many millions of such arrangements and wait for data requests to appear
 and become an income stream.
 We expect dapp developers to get their users to randomly store some portion
 of storage keys specifically related to their dapp in browser localstorage.
 This could even deliberately be made easy to do in the web3 API.
 In practice, we expect the number of “archival nodes” that simply store
 everything forever to continue to be high enough to serve the network until
 the total state size exceeds ~1-10 terabytes after the introduction of
 sharding, so the above may not even be needed.
\end_layout

\begin_layout Standard
Links discussing related ideas:
\end_layout

\begin_layout Standard
Further data availability schemes may be found here...

\series bold
 IPFS for storage.
 File coin.
 They augment IPFS with a proof of storage over time.
 However the key is do you also have th up to dat weitnesses, which is not
 covered in their protocol.
 Whenever witnesses come int hey update the state.
 Doing this would greatly reduce costs and allow others to become miners.
 
\end_layout

\begin_layout Section
Virtual Machine - Web Assembly? 
\end_layout

\begin_layout Standard
Fast & Efficient: To truly distinguish Ethereum as the World Computer we
 need to have a very performant VM.
 The current architecture of the VM is one of the greatest blockers to raw
 performance.
 WebAssembly aims to execute at near native speed by taking advantage of
 common hardware capabilities available on a wide range of platforms.
 This will open the door to a wide array of uses that require performance/throug
hput.
 
\end_layout

\begin_layout Standard
Toolchain Compatibility: A LLVM front-end for WASM is part of the MVP.
 This will Allow developers to write contracts and reuse applications written
 in common languages such as C/C++, go and rust.
 
\end_layout

\begin_layout Standard
Portability: WASM is targeted to be deployed in all the major web browsers
 which will result in it being one of the most widely deployed VM architecture.
 Contracts compiled to eWASM will share compatibility with any standard
 WASM environment.
 Which will make running a program either directly on Ethereum, on a cloud
 hosting environment, or on one's local machine - a frictionless process.
 
\end_layout

\begin_layout Standard
Optional And Flexible Metering: Metering the VM adds overhead but is essential
 for running untrusted code.
 If code is trusted then metering maybe optional.
 eWASM defines metering as an optional layer to accommodate for these use
 cases.
 
\end_layout

\begin_layout Standard
Metering VMs is the same concept as electrical power companies have when
 charging you for the amount of electricity that you used.
 With VM's we attempt to get a measurement of computation time of some code
 and instead of electricity used, you are charged for the CPU's time used.
 We call this metering.
\end_layout

\begin_layout Standard

\series bold
Not off the bat, a transpiler will have to be created to compile existing
 EVM code into eWASM.
 As far as other High level languages you should be able to use an language
 that can be compiled by LLVM ( c/c++/rust/go)
\end_layout

\begin_layout Standard
Part of the project goal is to eliminate nasal-demons.
 It's in the MVP.
 There are still a couple of edge case like sign values on NaNs but they
 can be canonicalized by AST transforms.
\end_layout

\begin_layout Standard

\series bold
Most languages with a virtual machine can be transpiled, meaning you could
 run the contracts of some other coin in here.
 If we use same base as Zilliqa or Dfinity, then we can re-use any transpilers
 they build.
 `Ultimately, the battle will not be won on language features, but on cost.
 Since in the future, you will be able to deploy any contract on any system.
 
\end_layout

\begin_layout Section
Comparison With Other Coins
\end_layout

\begin_layout Standard
(1) Transpilers ; (2) 
\end_layout

\begin_layout Standard
The first question we should ask of the architecture is the nature of forks.
 Should a sharded-block-chain be fork-free? 
\end_layout

\begin_layout Standard
Dfinity overview:
\end_layout

\begin_layout Itemize
Random number generation to select block maker and notarisation group
\end_layout

\begin_layout Itemize
Notarization proves that a block has been published at some time, based
 on a group vote.
\end_layout

\begin_layout Itemize
Notarisation is more secure than a single vote.
 => Finality after two rounds.
\end_layout

\begin_layout Itemize

\series bold
Kind of taking a hybrid approach pBft and block based consensus.
 
\end_layout

\begin_layout Itemize
Good: 
\series bold
notarization in Dfinity is not primarily a validity guarantee but rather
 a timestamp plus a proof of publication' 
\end_layout

\begin_layout Itemize

\series bold
Good: almost fork-free; Good: still uses probabilistic consensus; Prevents
 long-range stake attacks
\end_layout

\begin_layout Standard
Neo:
\end_layout

\begin_layout Itemize
Delegated Proof of Stake.
 
\end_layout

\begin_layout Itemize
Finality after a single round.
 Why based on voting.
 
\end_layout

\begin_layout Standard
Zilliqa:
\end_layout

\begin_layout Itemize
Sampling into shards.
 
\end_layout

\begin_layout Itemize
Honest majority assumotio + PBFT, much more robust.
 
\end_layout

\begin_layout Itemize

\series bold
Good: Uses random sampling so robust vopting groups;
\end_layout

\begin_layout Itemize

\series bold
Bad: no slashable conditions.
 
\end_layout

\begin_layout Standard
Ethereum: 
\end_layout

\begin_layout Itemize
Splitting problems of availability from validity?
\end_layout

\begin_layout Itemize
Availability can be decided quickly.
 
\end_layout

\begin_layout Itemize
Validity decided by a kind of Trubit systle mechanism, which means validity
 can then be checked quickly.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://cmt.research.microsoft.com/NIPS2016/
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Please read carefully the instructions below and follow them faithfully.
\end_layout

\begin_layout Subsection
Style
\end_layout

\begin_layout Plain Layout
Papers to be submitted to NIPS 2016 must be prepared according to the instructio
ns presented here.
 Papers may only be up to eight pages long, including figures.
 Since 2009 an additional ninth page 
\emph on
containing only acknowledgments and/or cited references
\emph default
 is allowed.
 Papers that exceed nine pages will not be reviewed, or in any other way
 considered for presentation at the conference.
\end_layout

\begin_layout Plain Layout
The margins in 2016 are the same as since 2007, which allow for 
\begin_inset Formula $\sim$
\end_inset


\begin_inset Formula $15\%$
\end_inset

 more words in the paper compared to earlier years.
\end_layout

\begin_layout Plain Layout
Authors are required to use the NIPS \SpecialChar LaTeX
 style files obtainable at the NIPS
 website as indicated below.
 Please make sure you use the current files and not previous versions.
 Tweaking the style files may be grounds for rejection.
\end_layout

\begin_layout Subsection
Retrieval of style files
\end_layout

\begin_layout Plain Layout
The style files for NIPS and other conference information are available
 on the World Wide Web at 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.nips.cc/
\end_layout

\end_inset

 
\end_layout

\begin_layout Plain Layout
The file 
\family typewriter
nips_2016.pdf
\family default
 contains these instructions and illustrates the various formatting requirements
 your NIPS paper must satisfy.
\end_layout

\begin_layout Plain Layout
The only supported style file for NIPS 2016 is 
\family typewriter
nips_2016.sty
\family default
, rewritten for \SpecialChar LaTeX2e
.
 
\series bold
Previous style files for \SpecialChar LaTeX
 2.09, Microsoft Word, and RTF are no longer supported!
\end_layout

\begin_layout Plain Layout
The new \SpecialChar LaTeX
 style file contains two optional arguments: 
\family typewriter
final
\family default
, which creates a camera-ready copy, and 
\family typewriter
nonatbib
\family default
, which will not load the 
\family typewriter
natbib
\family default
 package for you in case of package clash.
\end_layout

\begin_layout Plain Layout
At submission time, please omit the 
\family typewriter
final
\family default
 option.
 This will anonymize your submission and add line numbers to aid review.
 Please do 
\emph on
not
\emph default
 refer to these line numbers in your paper as they will be removed during
 generation of camera-ready copies.
\end_layout

\begin_layout Plain Layout
The file 
\family typewriter
nips_2016.tex
\family default
 may be used as a 
\begin_inset Quotes eld
\end_inset

shell
\begin_inset Quotes erd
\end_inset

 for writing your paper.
 All you have to do is replace the author, title, abstract, and text of
 the paper with your own.
\end_layout

\begin_layout Plain Layout
The formatting instructions contained in these style files are summarized
 in Sections 
\begin_inset CommandInset ref
LatexCommand ref
reference "gen_inst"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand ref
reference "headings"

\end_inset

, and 
\begin_inset CommandInset ref
LatexCommand ref
reference "others"

\end_inset

 below.
\end_layout

\begin_layout Section
General formatting instructions
\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "gen_inst"

\end_inset


\end_layout

\begin_layout Plain Layout
The text must be confined within a rectangle 5.5
\begin_inset space ~
\end_inset

inches (33
\begin_inset space ~
\end_inset

picas) wide and 9
\begin_inset space ~
\end_inset

inches (54
\begin_inset space ~
\end_inset

picas) long.
 The left margin is 1.5
\begin_inset space ~
\end_inset

inch (9
\begin_inset space ~
\end_inset

picas).
 Use 10
\begin_inset space ~
\end_inset

point type with a vertical spacing (leading) of 11
\begin_inset space ~
\end_inset

points.
 Times New Roman is the preferred typeface throughout, and will be selected
 for you by default.
 Paragraphs are separated by 
\begin_inset Formula $\nicefrac{1}{2}$
\end_inset


\begin_inset space ~
\end_inset

line space (5.5 points), with no indentation.
 
\end_layout

\begin_layout Plain Layout
The paper title should be 17
\begin_inset space ~
\end_inset

point, initial caps/lower case, bold, centered between two horizontal rules.
 The top rule should be 4
\begin_inset space ~
\end_inset

points thick and the bottom rule should be 1
\begin_inset space ~
\end_inset

point thick.
 Allow 
\begin_inset Formula $\nicefrac{1}{4}$
\end_inset


\begin_inset space ~
\end_inset

inch space above and below the title to rules.
 All pages should start at 1
\begin_inset space ~
\end_inset

inch (6
\begin_inset space ~
\end_inset

picas) from the top of the page.
\end_layout

\begin_layout Plain Layout
For the final version, authors' names are set in boldface, and each name
 is centered above the corresponding address.
 The lead author's name is to be listed first (left-most), and the co-authors'
 names (if different address) are set to follow.
 If there is only one co-author, list both author and co-author side by
 side.
\end_layout

\begin_layout Plain Layout
Please pay special attention to the instructions in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "others"

\end_inset

 regarding figures, tables, acknowledgments, and references.
\end_layout

\begin_layout Section
Headings: first level
\end_layout

\begin_layout Plain Layout
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
What if an unavailable block gets notarised.
 
\end_layout

\begin_layout Plain Layout

\series bold
A further condition: Rewarding: All validators who vote automatically lose
 £50.
 They are rewarded when they have voted on a commit that is finalised,
\series default
 but the slashing condition is far greater than...
 Slashing condition is 1/6 for failures because can't guarantee who dunn
 it.
 However, unlikely a group is censored.
 
\end_layout

\begin_layout Plain Layout
Use a gossip protocol to cast messages.
 
\end_layout

\begin_layout Plain Layout

\series bold
We rotate the proposer every view.
 The view is given globally, by the random beacon.
 
\end_layout

\begin_layout Plain Layout
https://medium.com/@VitalikButerin/minimal-slashing-conditions-20f0b500fc6c
\end_layout

\begin_layout Plain Layout
https://github.com/ethereum/wiki/wiki/Proof-of-Stake-FAQ
\end_layout

\begin_layout Plain Layout
https://yoichihirai.com/minimal.pdf
\end_layout

\begin_layout Plain Layout
We shuffle validators using 
\end_layout

\begin_layout Plain Layout

\series bold
Have several hubs where the validators moneys are locked up.
 Post a slashing rule to those hubs to slash a validator, via a cross-chain
 transaction.
 Offline validators: validators are decommissioned after a set number of
 rounds.
 
\end_layout

\begin_layout Plain Layout
Honest nodes only vote for one => can wait for a 2/3 
\end_layout

\begin_layout Plain Layout
We use multi-cast messages/ Gossip to relay all the votes.
 
\end_layout

\begin_layout Plain Layout

\series bold
https://cseweb.ucsd.edu/~mihir/papers/multisignatures-ccs.pdf
\end_layout

\begin_layout Plain Layout

\series bold
threshold signatures
\series default
 are not necessary ....
 individually accountable.
 Just assume there is some honest node checking it.
 If it's false a fraud proof may be given.
 could even require a group signature of the individual sig.
 
\end_layout

\begin_layout Plain Layout

\series bold
Slashing condition should be based on there being a valid proof of availability,
 consensus not necessary.
 
\end_layout

\begin_layout Plain Layout
—————>
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Broadly speaking, there are two kinds of block-chain protocols: those that
 admit forks and those that don't.
 
\end_layout

\begin_layout Plain Layout
One of the chief benefit of forking consensus protocols like Bitcoin, is
 that they allow the network to recover from majority attacks.
 Even if a 
\begin_inset Quotes eld
\end_inset

dishonest
\begin_inset Quotes erd
\end_inset

 majority creates an invalid chain, so long as the network recovers its
 honest majority, the invalid chain may be overtaken by a valid one.
 we may summarise this by saying: In Bitcoin, votes are continuously validate
 prior blocks and so no block is truly finalised.
 It may at any point be reverted.
 Conversely, in fork-free protocols, such as PBFT, once a vote validating
 a block occurs it is final.
 
\end_layout

\begin_layout Plain Layout
However, in the context of a sharded block-chain forking consensus protocols
 need a great deal of extra apparatus due to inter-shard dependencies.
 If a fork on the block-chain occurs on shard A, and shard B has blocks
 that depend on the state in shard A, then a reversion of blocks on shard
 A will need to effect a reversions of blocks on shard B.
 Tracking all the state dependencies and ensuring that reversions do not
 revert too much of the global state is still an unsolved problem in the
 block-chain space.
 This problem is compounded by the fragmentation of state that comes with
 sharding.
 If state is distributed across many shards, then a large proportion of
 transactions on the block-chain reference state between shards, meaning
 a large number of dependencies, and reversions on one shard causing reversions
 on many others .
 Bearing these thoughts in mind, a sharded block-chain must either: 
\end_layout

\begin_layout Enumerate
Track inter-shard dependencies created by transactions, and determine an
 efficient way of reverting those changes, thereby maintaining the resilience
 of the block-chain to majority attacks.
\end_layout

\begin_layout Enumerate
Adopt a consensus protocol that admits no forks at the application layer,
 thereby losing the flexibility of a block-chain to withstand short-lived
 50% attacks on the network.
\end_layout

\begin_layout Plain Layout
In Maxima, we adopt the second approach but with the following fail-safe:
 In the event of a large-scale attack, whether clients would chose the dishonest
 chain or chose to revert those changes would be determined largely by social
 consensus: a proof that an attack had been performed by a dishonest majority
 with encouragement from the Maxima organisation about which block to revert
 to.
 
\end_layout

\begin_layout Plain Layout
Having made the case for forking chains, it should be noted that in the
 entire history of Bitcoin only once was a block-chain reverted by more
 than its finalisation threshold of 6 blocks.
 This incident occurred due to a mining consortium not checking block validity
 when mining.
 However, a social layer of consensus has been used at least twice to change
 the protocol.
 This means that using social consensus to resolve short-term attacks does
 not come with much overhead, if historical precedent is to be assumed.
\end_layout

\begin_layout Plain Layout
More concretely, our voting scheme: 
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Having said that, Maxima's approach would be to prevent any form of attack,
 and to provide stronger safety guarantees than Bitcoin- for instance by
 adopting proof of stake which reduces miner centralisation
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
There are significant economies of scale that come with proof of work mining:
 a huge amount of R&D funding is put into developing custom hardware for
 mining; low cost energy in certain parts of the world make mining pools
 far more attractive in parts of China than elsewhere.
 Such economies of scale are not present in proof of stake systems, which
 reduces miner centralisation.
\end_layout

\end_inset

.
 Furthermore, a number of popular block-chain protocols are also fork-free
 and so far fault tolerant, they include: NEO, Zilliqa,EOS.
 We aim for our system to be as resilient as these, but with much greater
 scalability due to sharding.
 In the long term, we will also explore methods for forkful sharding that
 resolves the problem of tracking inter-shard dependencies and reverting
 on block-chain forks, although that is not the present plan.
 
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "headings"

\end_inset


\end_layout

\begin_layout Plain Layout
All headings should be lower case (except for first word and proper nouns),
 flush left, and bold.
\end_layout

\begin_layout Plain Layout
First-level headings should be in 12-point type.
\end_layout

\begin_layout Subsection
Headings: second level
\end_layout

\begin_layout Plain Layout
Second-level headings should be in 10-point type.
\end_layout

\begin_layout Subsubsection
Headings: third level
\end_layout

\begin_layout Plain Layout
Third-level headings should be in 10-point type.
\end_layout

\begin_layout Paragraph
Paragraphs
\end_layout

\begin_layout Plain Layout
There is also a 
\family typewriter

\backslash
paragraph
\family default
 command available, which sets the heading in bold, flush left, and inline
 with the text, with the heading followed by 1
\begin_inset space \thinspace{}
\end_inset

em of space.
\end_layout

\begin_layout Section
Citations, figures, tables, references
\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "others"

\end_inset


\end_layout

\begin_layout Plain Layout
These instructions apply to everyone.
\end_layout

\begin_layout Subsection
Citations within the text
\end_layout

\begin_layout Plain Layout
The 
\family typewriter
natbib
\family default
 package will be loaded for you by default.
 Citations may be author/year or numeric, as long as you maintain internal
 consistency.
 As to the format of the references themselves, any style is acceptable
 as long as it is used consistently.
\end_layout

\begin_layout Plain Layout
The documentation for 
\family typewriter
natbib
\family default
 may be found at 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://mirrors.ctan.org/macros/latex/contrib/natbib/natnotes.pdf
\end_layout

\end_inset

 
\end_layout

\begin_layout Plain Layout
Of note is the command 
\family typewriter

\backslash
citet
\family default
, which produces citations appropriate for use in inline text.
 For example, 
\end_layout

\begin_layout Plain Layout
\noindent
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{verbatim}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

   
\backslash
citet{hasselmo} investigated
\backslash
dots
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
produces 
\end_layout

\begin_layout Quote
Hasselmo, et al.
\begin_inset space \space{}
\end_inset

(1995) investigated…
\end_layout

\begin_layout Plain Layout
If you wish to load the 
\family typewriter
natbib
\family default
 package with options, you may add the following before loading the 
\family typewriter
nips_2016
\family default
 package: 
\end_layout

\begin_layout Plain Layout
\noindent
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{verbatim}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

   
\backslash
PassOptionsToPackage{options}{natbib}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
If 
\family typewriter
natbib
\family default
 clashes with another package you load, you can add the optional argument
 
\family typewriter
nonatbib
\family default
 when loading the style file: 
\end_layout

\begin_layout Plain Layout
\noindent
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{verbatim}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

   
\backslash
usepackage[nonatbib]{nips_2016}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
As submission is double blind, refer to your own published work in the third
 person.
 That is, use 
\begin_inset Quotes eld
\end_inset

In the previous work of Jones et al.
\begin_inset space \space{}
\end_inset

[4],
\begin_inset Quotes erd
\end_inset

 not 
\begin_inset Quotes eld
\end_inset

In our previous work [4].
\begin_inset Quotes erd
\end_inset

 If you cite your other papers that are not widely available (e.g., a journal
 paper under review), use anonymous author names in the citation, e.g., an
 author of the form 
\begin_inset Quotes eld
\end_inset

A.
\begin_inset space \space{}
\end_inset

Anonymous.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Subsection
Footnotes
\end_layout

\begin_layout Plain Layout
Footnotes should be used sparingly.
 If you do require a footnote, indicate footnotes with a number
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Sample of the first footnote.
\end_layout

\end_inset

 in the text.
 Place the footnotes at the bottom of the page on which they appear.
 Precede the footnote with a horizontal rule of 2
\begin_inset space ~
\end_inset

inches (12
\begin_inset space ~
\end_inset

picas).
\end_layout

\begin_layout Plain Layout
Note that footnotes are properly typeset 
\emph on
after
\emph default
 punctuation marks.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
As in this example.
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Figures
\end_layout

\begin_layout Plain Layout
All artwork must be neat, clean, and legible.
 Lines should be dark enough for purposes of reproduction.
 The figure number and caption always appear after the figure.
 Place one line space before the figure caption and one line space after
 the figure.
 The figure caption should be lower case (except for first word and proper
 nouns); figures are numbered consecutively.
\end_layout

\begin_layout Plain Layout
You may use color figures.
 However, it is best for the figure captions and the paper body to be legible
 if the paper is printed in either black/white or in color.
 
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
fbox{
\end_layout

\end_inset


\begin_inset CommandInset line
LatexCommand rule
offset "-.5cm"
width "0cm"
height "4cm"

\end_inset

 
\begin_inset CommandInset line
LatexCommand rule
offset "-.5cm"
width "4cm"
height "0cm"

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\begin_inset Caption Standard

\begin_layout Plain Layout
Sample figure caption.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Tables
\end_layout

\begin_layout Plain Layout
All tables must be centered, neat, clean and legible.
 The table number and title always appear before the table.
 See Table
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sample-table"

\end_inset

.
\end_layout

\begin_layout Plain Layout
Place one line space before the table title, one line space after the table
 title, and one line space after the table.
 The table title must be lower case (except for first word and proper nouns);
 tables are numbered consecutively.
\end_layout

\begin_layout Plain Layout
Note that publication-quality tables 
\emph on
do not contain vertical rules.

\emph default
 We strongly suggest the use of the 
\family typewriter
booktabs
\family default
 package, which allows for typesetting high-quality, professional tables:
 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://www.ctan.org/pkg/booktabs
\end_layout

\end_inset

 
\end_layout

\begin_layout Plain Layout
This package was used to typeset Table
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sample-table"

\end_inset

.
\end_layout

\begin_layout Plain Layout
\begin_inset Float table
placement t
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
Sample table title
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sample-table"

\end_inset

 
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="3">
<features booktabs="true" tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell multicolumn="1" alignment="none" valignment="top" topline="true" usebox="none" special="c">
\begin_inset Text

\begin_layout Plain Layout
Part
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="none" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Size (
\begin_inset Formula $\mu$
\end_inset

m) 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Dendrite 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Input terminal 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\sim$
\end_inset

100 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Axon 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Output terminal 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\sim$
\end_inset

10 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Soma 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Cell body 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
up to 
\begin_inset Formula $10^{6}$
\end_inset

 
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Final instructions
\end_layout

\begin_layout Plain Layout
Do not change any aspects of the formatting parameters in the style files.
 In particular, do not modify the width or length of the rectangle the text
 should fit into, and do not change font sizes (except perhaps in the 
\series bold
References
\series default
 section; see below).
 Please note that pages should be numbered.
\end_layout

\begin_layout Section
Preparing PDF files
\end_layout

\begin_layout Plain Layout
Please prepare submission files with paper size 
\begin_inset Quotes eld
\end_inset

US Letter,
\begin_inset Quotes erd
\end_inset

 and not, for example, 
\begin_inset Quotes eld
\end_inset

A4.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Plain Layout
Fonts were the main cause of problems in the past years.
 Your PDF file must only contain Type 1 or Embedded TrueType fonts.
 Here are a few instructions to achieve this.
 
\end_layout

\begin_layout Itemize
You should directly generate PDF files using 
\family typewriter
pdflatex
\family default
.
 
\end_layout

\begin_layout Itemize
You can check which fonts a PDF files uses.
 In Acrobat Reader, select the menu Files
\begin_inset Formula $>$
\end_inset

Document Properties
\begin_inset Formula $>$
\end_inset

Fonts and select Show All Fonts.
 You can also use the program 
\family typewriter
pdffonts
\family default
 which comes with 
\family typewriter
xpdf
\family default
 and is available out-of-the-box on most Linux machines.
 
\end_layout

\begin_layout Itemize
The IEEE has recommendations for generating PDF files whose fonts are also
 acceptable for NIPS.
 Please see 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.emfield.org/icuwb2010/downloads/IEEE-PDF-SpecV32.pdf
\end_layout

\end_inset

 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Plain Layout
The 
\family typewriter

\backslash
bbold
\family default
 package almost always uses bitmap fonts.
 You should use the equivalent AMS Fonts: 
\end_layout

\begin_layout Plain Layout
\noindent
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{verbatim}
\end_layout

\begin_layout Plain Layout

    
\backslash
usepackage{amsfonts}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
followed by, e.g., 
\family typewriter

\backslash
mathbb{R}
\family default
,
\family typewriter
 
\backslash
mathbb{N}
\family default
, or 
\family typewriter

\backslash
mathbb{C}
\family default
 for 
\begin_inset Formula $\mathbb{R}$
\end_inset

, 
\begin_inset Formula $\mathbb{N}$
\end_inset

 or 
\begin_inset Formula $\mathbb{C}$
\end_inset

.
 You can also use the following workaround for reals, natural and complex:
 
\end_layout

\begin_layout Plain Layout
\noindent
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{verbatim}
\end_layout

\begin_layout Plain Layout

    
\backslash
newcommand{
\backslash
RR}{I
\backslash
!
\backslash
!R} %real numbers
\end_layout

\begin_layout Plain Layout

    
\backslash
newcommand{
\backslash
Nat}{I
\backslash
!
\backslash
!N} %natural numbers
\end_layout

\begin_layout Plain Layout

    
\backslash
newcommand{
\backslash
CC}{I
\backslash
!
\backslash
!
\backslash
!
\backslash
!C} %complex numbers
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
Note that 
\family typewriter
amsfonts
\family default
 is automatically loaded by the 
\family typewriter
amssymb
\family default
 package.
\end_layout

\end_deeper
\begin_layout Plain Layout
If your file contains type 3 fonts or non embedded TrueType fonts, we will
 ask you to fix it.
\end_layout

\begin_layout Subsection
Margins in \SpecialChar LaTeX

\end_layout

\begin_layout Plain Layout
Most of the margin problems come from figures positioned by hand using 
\family typewriter
special
\family default
 or other commands.
 We suggest using the command 
\family typewriter
includegraphics
\family default
 from the 
\family typewriter
graphicx
\family default
 package.
 Always specify the figure width as a multiple of the line width as in the
 example below: 
\end_layout

\begin_layout Plain Layout
\noindent
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{verbatim}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

   
\backslash
usepackage[pdftex]{graphicx} ...
\end_layout

\begin_layout Plain Layout

   
\backslash
includegraphics[width=0.8
\backslash
linewidth]{myfile.pdf}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
See Section 4.4 in the graphics bundle documentation (
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://mirrors.ctan.org/macros/latex/required/graphics/grfguide.pdf
\end_layout

\end_inset

)
\end_layout

\begin_layout Plain Layout
A number of width problems arise when \SpecialChar LaTeX
 cannot properly hyphenate a line.
 Please give 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

LaTeX
\end_layout

\end_inset

 hyphenation hints using the 
\family typewriter

\backslash
-
\family default
 command when necessary.
\end_layout

\begin_layout Subsubsection*
Acknowledgments
\end_layout

\begin_layout Plain Layout
Use unnumbered third level headings for the acknowledgments.
 All acknowledgments go at the end of the paper.
 Do not include acknowledgments in the anonymized submission, only in the
 final paper.
\end_layout

\end_inset


\end_layout

\begin_layout Section*
References
\end_layout

\begin_layout Standard
References follow the acknowledgments.
 Use unnumbered first-level heading for the references.
 Any choice of citation style is acceptable as long as you are consistent.
 It is permissible to reduce the font size to 
\family typewriter
small
\family default
 (9 point) when listing the references.
 
\series bold
Remember that you can use a ninth page as long as it contains 
\emph on
only
\emph default
 cited references.

\series default
 
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard

\size small
[1] Alexander, J.A.
\begin_inset space \space{}
\end_inset

& Mozer, M.C.
\begin_inset space \space{}
\end_inset

(1995) Template-based algorithms for connectionist rule extraction.
 In G.
\begin_inset space \space{}
\end_inset

Tesauro, D.S.
\begin_inset space \space{}
\end_inset

Touretzky and T.K.
\begin_inset space \space{}
\end_inset

Leen (eds.), 
\shape italic
Advances in Neural Information Processing Systems 7
\shape default
, pp.
\begin_inset space \space{}
\end_inset

609–616.
 Cambridge, MA: MIT Press.
\end_layout

\begin_layout Standard

\size small
[2] Bower, J.M.
\begin_inset space \space{}
\end_inset

& Beeman, D.
\begin_inset space \space{}
\end_inset

(1995) 
\shape italic
The Book of GENESIS: Exploring Realistic Neural Models with the GEneral
 NEural SImulation System.

\shape default
 New York: TELOS/Springer–Verlag.
\end_layout

\begin_layout Standard

\size small
[3] Hasselmo, M.E., Schnell, E.
\begin_inset space \space{}
\end_inset

& Barkai, E.
\begin_inset space \space{}
\end_inset

(1995) Dynamics of learning and recall at excitatory recurrent synapses
 and cholinergic modulation in rat hippocampal region CA3.
 
\shape italic
Journal of Neuroscience
\shape default
 
\series bold
15
\series default
(7):5249-5262.
\end_layout

\end_body
\end_document
